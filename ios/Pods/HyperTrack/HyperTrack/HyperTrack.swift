//
//  Hypertrack.swift
//  HyperTrack
//
//  Created by Pratik Naik on 2/17/17.
//  Copyright Â© 2017 Pratik Naik. All rights reserved.
//

import Foundation
import Alamofire


/**
 The HyperTrack SDK interface to power all your location needs
*/
@objc public class HyperTrack:NSObject {

  /**
   Call this method to set a HyperTrackDelegate. This allows you to receive events and errors as they occur.

   - Parameter delegate: The delegate that receives errors and events
   */
  @objc public class func setDelegate(_ delegate:HyperTrackDelegate? = nil) {
    Transmitter.sharedInstance.delegate = delegate
  }

  /**
   Call this method to initialize HyperTrack SDKs with your Account's PublishableKey
   in the application didFinishLaunchingWithOptions delegate method

   - Parameter publishableKey: Your account's publishable key
   */
  @objc public class func initialize(_ publishableKey: String) {
    Transmitter.sharedInstance.setPublishableKey(publishableKey:publishableKey)
    Transmitter.sharedInstance.initialize()
  }
  
  /**
   Call this method to get the publishableKey set on the HyperTrack SDK
 
   - Returns: The publishableKey configured on the SDK
   */
  @objc public class func getPublishableKey() -> String? {
    return Transmitter.sharedInstance.getPublishableKey()
  }

  /**
   Call this method to set UserId in HyperTrack SDK for the current user.

   - Parameter userId: The unique User Id generated by HyperTrack
   */
  @objc public class func setUserId(_ userId: String) {
    Transmitter.sharedInstance.setUserId(userId:userId)
  }

  /**
   Call this method to get the UserId set on the HyperTrack SDK

   - Returns: The userId configured on the SDK
   */
  @objc public class func getUserId() -> String? {
    return Transmitter.sharedInstance.getUserId()
  }

  /**
   This attribute refers to the current tracking status of the SDK.

   - Returns: A boolean representing if the SDK is currently tracking the User
   */
  @objc public class var isTracking:Bool {
    get {
      return Transmitter.sharedInstance.isTracking
    }
  }

  /**
   Call this method to create a new user to track on HyperTrack.
   Also sets the newly created user as the user to track on the SDK.

   - Parameter name: The name of the user that will be created on HyperTrack
   */
  @objc public class func createUser(_ name: String) {
    Transmitter.sharedInstance.createUser(name, completionHandler:nil)
  }

  /**
   Call this method to create a new user to track on HyperTrack.
   Also sets the newly created user as the user to track on the SDK.

   - Parameter name: The name of the user that will be created on HyperTrack
   - Parameter completionHandler: The completion handler which is called with the newly created user on success or an error on failure
   */
//  @objc(createUserWithCompletionHandler:completionHandler:)
  @objc public class func createUser(_ name: String, completionHandler: @escaping (_ user: HyperTrackUser?, _ error: HyperTrackError?) -> Void) {
    Transmitter.sharedInstance.createUser(name, completionHandler:completionHandler)
  }

  /**
   Call this method to create a new user to track on HyperTrack.
   Also sets the newly created user as the user to track on the SDK.

   - Parameter name: The name of the user that will be created on HyperTrack
   - Parameter phone: The phone number of the user that will be created on HyperTrack
   - Parameter photo: The photo of the user that will be created on HyperTrack
   - Parameter completionHandler: The completion handler which is called with the newly created user on success or an error on failure
   */
  @objc public class func createUser(_ name: String, _ phone: String, _ photo: UIImage?, completionHandler: @escaping (_ user: HyperTrackUser?, _ error: HyperTrackError?) -> Void) {
    Transmitter.sharedInstance.createUser(name, phone, photo, completionHandler)
  }
  
  /**
   * Call this method to get or create a User on HyperTrack API Server for the current device
   * with given lookup_id. Refer to the documentation on creating a user
   *
   * Parameter userName  Name of the user
   * Parameter phone     E164 formatted phone number of the user
   * Parameter lookupId  A unique id that you can add to the user to search
   * Parameter completionHandler: The completion handler which is called with the newly created user on success or an error on failure
   */
  @objc public class func getOrCreateUser(_ name: String, _phone: String, _ lookupID: String, completionHandler: @escaping (_ user: HyperTrackUser?, _ error: HyperTrackError?) -> Void) {
    Transmitter.sharedInstance.createUser(name, _phone, lookupID, completionHandler)
  }
  
  /**
   Call this method to start tracking on the SDK. This starts the location service if needed.

   - Requires: A userId (either through `setUserId` or `createUser`) and a publishable key(through `initialize`) to be set.
   */
  @objc public class func startTracking() {
    Transmitter.sharedInstance.startTracking(completionHandler: nil)
  }

  /**
   Call this method to start tracking on the SDK. This starts the location service if needed.

   - Parameter completionHandler: The completion handler which is called with an error if there is an error starting
   - Requires: A userId (either through `setUserId` or `createUser`) and a publishable key(through `initialize`) to be set.
   */
  @objc public class func startTracking(completionHandler: @escaping (_ error: HyperTrackError?) -> Void) {
    Transmitter.sharedInstance.startTracking(completionHandler: completionHandler)
  }

  /**
   Call this method to stop tracking on the SDK and stop all running services.
   */
  @objc public class func stopTracking() {
    Transmitter.sharedInstance.stopTracking(completionHandler: nil)
  }

  /**
   Call this method to stop tracking on the SDK and stop all running services.

   - Parameter completionHandler: The completion handler which is called with an error if there is an error stopping
   */
  @objc public class func stopTracking(completionHandler: @escaping (_ error: HyperTrackError?) -> Void) {
    Transmitter.sharedInstance.stopTracking(completionHandler: completionHandler)
  }

  /**
   Call this method to complete an action from the SDK with an actionId. Completes the provided actionId on HyperTrack.

   - Parameter actionId: The actionId to complete
   */
  @objc public class func completeAction(_ actionId: String) {
    Transmitter.sharedInstance.completeAction(actionId: actionId)
  }

  /**
   Call this method to create a completed action on HyperTrack.
   */
  @objc public class func completeAction() {
    Transmitter.sharedInstance.completeAction(actionId: nil)
  }

  /**
   Call this method to create and assign an Action to the current user.

   - Parameter actionParams: Pass instance of ActionParams built using ActionParamsBuilder class
   - Parameter callback: Pass instance of HyperTrack callback as parameter
   */
  @objc public class func assignAction(_ expectedPlace: [String: Any], _ type: String, _ completionHandler: @escaping (_ action: HyperTrackAction?, _ error: HyperTrackError?) -> Void) {
    Transmitter.sharedInstance.assignAction(expectedPlace, type, completionHandler)
  }

  /**
   Call this method to get action model for a given actionId

   - Parameter actionId:  Pass the action's unique id generated on HyperTrack API Server
   - Parameter completionHandler:  Pass instance of HyperTrack callback as parameter
   */
  @objc public class func getAction(_ actionId: String, completionHandler: @escaping (_ action: HyperTrackAction?, _ error: HyperTrackError?) -> Void) {
    Transmitter.sharedInstance.getAction(actionId, completionHandler)
  }

  // Utility methods
  /**
   Call this method to request the location when in use permission.
   */
  @objc public class func requestWhenInUseAuthorization() {
    Transmitter.sharedInstance.requestWhenInUseAuthorization()
  }

  /**
   Call this method to request the location always permission.
   */
  @objc public class func requestAlwaysAuthorization() {
    Transmitter.sharedInstance.requestAlwaysAuthorization()
  }

  @objc public class func registerDeviceToken() {
    // Post to server
  }

  @objc public class func handleNotification() {
    // Read notification data
  }
}
